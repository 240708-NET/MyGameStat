name: API Build and Deploy

#triggers
on:
  push:
  #conditions
    # Specify the branch that needs deployment (checkup)
    branches:
      - main
    # Specify the folder that trigger build and deployment on changes 
    paths:
      - /src/web/API/**
      
  pull_request:    
    branches:
      - main
    paths:
      - src/web/API/**
  workflow_dispatch:

# tasks to complete
jobs:
  #each job will run on a new vm(build agent)
  build:
    #what type of vm will this job be performed on
    runs-on: Linux-latest
    #what steps we take to complete the job
    steps:
    - name: build-sanity-check
      run: echo "Keep building"

    #instruction to tell the VM will be based on .NET version 8
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # We tell the VM the source code
    - name: Checkout The Repo
      uses: actions/checkout@v4

     #install dependancies 
    - name: Dotnet Restore
      run: dotnet restore ./src/web/API/

      #start building .net project
    - name: Dotnet Build
      run: dotnet build --no-restore ./src/web/API/
    
    # Test
    - name: Dotnet Test
      run: dotnet test --no-build --verbosity normal ./src/web/API/
    
      #containerize
  dockerize:
    needs: build
    runs-on: Linux-latest

    steps:
    # Check if the system is working
    - name: dockerize-sanity-check
      run: echo "Keep dockerizing"

    # Specify the source code
    - name: Checkout Source
      uses: actions/checkout@v4

      #Install docker
    - name: Install Docker
      uses: docker/setup-buildx-action@v2
    
      # login to our docker account
    - name: Login to dockerhub
      uses: docker/login-action@v2
      with:
        registry: https://index.docker.io/v1/
        # We use the github repository secret to store user name password
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # push to our docker repo
    - name: Build and Push to dockerhub
      uses: docker/build-push-action@v5
      with:
        # specify the location of the docker file
        context: ./src/web/API/
        push: true
        

  deploy:
    # Specify which job needs to be finished first
    needs: dockerize
    runs-on: Linux-latest

    steps:
    
    # Check the system
    - name: deploy-sanity-check
      run: echo "Keep deploying"

    # Deploy to azure web app
    